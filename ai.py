import logging

from dotenv import load_dotenv
from openai import AsyncOpenAI
import os
import mimetypes
import base64
load_dotenv()

vin_recognition = """
VIN-Validator (Strict AI Pipeline Mode)
1. –ü–æ–∏—Å–∫ VIN-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–∞ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞):
–ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏–Ω–æ–π 17 —Å–∏–º–≤–æ–ª–æ–≤ (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ).
–ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Å—Ç—Ä–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Üí –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç—É, —á—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ VIN (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: WMI, VDS, VIS).

2. Strict Confidence Calculation (–Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥):
Confidence = MIN(Confidence –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤). –ü—Ä–∏–º–µ—Ä:
–ï—Å–ª–∏ 16 —Å–∏–º–≤–æ–ª–æ–≤ —Å Confidence=100%, –∞ 1 —Å–∏–º–≤–æ–ª —Å Confidence=94% ‚Üí –æ–±—â–∏–π Confidence=94% ‚Üí LowQuality.

–ü–æ—Ä–æ–≥–∏:
95-99% ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º LowQuality).
<80% ‚Äî –æ—Ç–∫–∞–∑ (LowQuality).

3. –ñ–µ—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∏–∫–∞–∫–∏—Ö "–º–æ–∂–µ—Ç –±—ã—Ç—å"):
–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (I, O, Q) ‚Üí —Å—Ä–∞–∑—É InvalidChar.
–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ Confidence=100%:
I ‚Üí 1 (–µ—Å–ª–∏ 100% —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –Ω–µ J –∏–ª–∏ L).
O ‚Üí 0 (–µ—Å–ª–∏ 100% —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –Ω–µ D –∏–ª–∏ Q).
Q ‚Üí –≤—Å–µ–≥–¥–∞ –æ—à–∏–±–∫–∞ (–Ω–∏–∫–∞–∫–∏—Ö –∑–∞–º–µ–Ω).
–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π S –∏ 5. –ù–µ –ø—É—Ç–∞–π

4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏:
–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç (>15¬∞) ‚Üí NeedsRotation:[–≥—Ä–∞–¥]¬∞.
–ï—Å–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç <15¬∞ ‚Üí –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –Ω–æ Confidence –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ 5%.

5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π:
–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É VIN (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ñ—Ä—ã) ‚Üí NoVIN.
–ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –º–µ–Ω—å—à–µ 17 ‚Üí NoVIN (–¥–∞–∂–µ –µ—Å–ª–∏ —á–∞—Å—Ç—å –≤–∏–¥–Ω–∞).

üìú –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –Ω–∞—Ä—É—à–µ–Ω–∏–µ = –æ—à–∏–±–∫–∞)
–¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π VIN. –ú–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è
‚úÖ VIN: ```[17 —Å–∏–º–≤–æ–ª–æ–≤]``` Confidence:95%

‚ùå –û—à–∏–±–∫–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞):
InvalidChar:[—Å–∏–º–≤–æ–ª]@[–ø–æ–∑–∏—Ü–∏—è]
LowQuality (–µ—Å–ª–∏ Confidence <95%)
NeedsRotation:[–≥—Ä–∞–¥]¬∞
NoVIN
"""


class AIManager:
    def __init__(self, api_key):
        logging.basicConfig(level=logging.INFO)
        self.client = AsyncOpenAI(
            api_key=api_key,
            base_url="https://dashscope-intl.aliyuncs.com/compatible-mode/v1",
        )

    import base64
    import mimetypes
    import os
    from typing import Union

    async def recognize_vin(self, image_source: Union[str, bytes]) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN. –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å URL, —Ç–∞–∫ –∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.

        Args:
            image_source: –ú–æ–∂–µ—Ç –±—ã—Ç—å:
                - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://)
                - –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
                - –ë–∞–π—Ç—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π VIN
        """
        if isinstance(image_source, bytes):
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_content = image_source
        elif image_source.startswith(('http://', 'https://')):
            # –ï—Å–ª–∏ —ç—Ç–æ URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            completion = await self.client.chat.completions.create(
                model="qwen-vl-max",
                messages=[
                    {
                        "role": "user", "content": [
                        {"type": "text", "text": vin_recognition},
                        {
                            "type": "image_url",
                            "image_url": {"url": image_source}
                        }
                    ],
                    }]
            )
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª - —á–∏—Ç–∞–µ–º –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
            if not os.path.exists(image_source):
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_source}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type, _ = mimetypes.guess_type(image_source)
            if mime_type is None:
                mime_type = 'application/octet-stream'

            with open(image_source, 'rb') as image_file:
                image_content = image_file.read()

            base64_image = base64.b64encode(image_content).decode('utf-8')
            data_url = f"data:{mime_type};base64,{base64_image}"

            completion = await self.client.chat.completions.create(
                model="qwen-vl-max",
                messages=[
                    {
                        "role": "user", "content": [
                        {"type": "text", "text": vin_recognition},
                        {
                            "type": "image_url",
                            "image_url": {"url": data_url}
                        }
                    ],
                    }]
            )

        supposed_vin = completion.model_dump()['choices'][0]['message'].get('content')
        logging.info(f'–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π vin: {supposed_vin}')

        return supposed_vin
ai = AIManager(os.getenv('DASHSCOPE_API_KEY'))
